# -*- coding: utf-8 -*-
"""upper_confidence_bound.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UBdtxe7VuxazUuYRUwsQl0e8inckhzS5

# Upper Confidence Bound (UCB)

## Importing the libraries
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

"""## Importing the dataset"""

dataset = pd.read_csv('Ads_CTR_Optimisation.csv')
dataset

"""## Implementing UCB"""

import math
N =  10000 # number of User
d= 10  # Number of Ads
ads_selected = []
numbers_of_selections = [0] * d #[0]*d represent list of 10 zero here (cause d=10) Ni(n)
sums_of_rewards = [0] * d #Ri(n)
total_reward = 0 # Cause in first round no ads selected
for n in range(0, N):
  ad = 0
  max_upper_bound =0
  for i in range(0,d):
    if (numbers_of_selections[i] > 0): #N(i)>0
      average_reward = sums_of_rewards[i] / numbers_of_selections[i]
      delta_i = math.sqrt(3/2 * math.log(n+1) / numbers_of_selections[i]) #because log can't take 0
      upper_bound = average_reward + delta_i
    else:
      upper_bound = 1e400 # means N(i)=0 thats why upperbound will be close to infinity
    if (upper_bound > max_upper_bound):
      max_upper_bound = upper_bound
      ad = i
  ads_selected.append(ad)
  numbers_of_selections[ad] = numbers_of_selections[ad] + 1
  reward = dataset.values[n, ad]
  sums_of_rewards[ad] = sums_of_rewards[ad] + reward
  total_reward = total_reward + reward

"""## Visualising the results"""

plt.hist(ads_selected)
plt.title('Histogram of ads selections')
plt.xlabel('Ads')
plt.ylabel('Number of times each ad was selected')
plt.show()